# Use an official Python runtime as the base image
FROM python:3.11.0

# Set the working directory in the container
WORKDIR /app

# Copy the backend files to the working directory
COPY backend/ .

# Install the backend dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install Node.js and npm
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash -
RUN apt-get install -y nodejs

# Copy the frontend files to the working directory
COPY frontend/ ./frontend/

# Change to the frontend directory
WORKDIR /app/frontend

# Install the frontend dependencies using Yarn
RUN yarn install

# Build the React app using Yarn
RUN yarn build

# Change back to the root directory
WORKDIR /app

# Copy the .env.example files as a fallback
COPY .env.example ./backend/.env
COPY frontend/.env.example ./frontend/.env

# Check for the actual .env files and replace the fallback if they exist
RUN if [ -f "./backend/.env" ]; then cp ./backend/.env ./backend/.env; fi
RUN if [ -f "./frontend/.env" ]; then cp ./frontend/.env ./frontend/.env; fi

# Expose the ports for the backend and frontend
EXPOSE 8000 3001

# Set up entrypoint script
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Specify the command to run the Django development server and serve the React app
CMD ["sh", "-c", "python manage.py runserver 0.0.0.0:8000 & cd frontend && npx serve -s build -l 3001"]